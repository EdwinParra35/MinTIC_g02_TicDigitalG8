@page "/movies/create"
@inject NavigationManager navigationManager
@inject IServiceMovie repositorio
@inject IErrorMessage showMessage
@using MovieProject.Client.Pages.Components

<FormMovie Movie="Movie" OnValidSubmit="Create" CategoriasNoSeleccionadas="CategoriasNoSeleccionadas"></FormMovie>
@code {
    private Movie Movie = new Movie();
    private List<Category> CategoriasNoSeleccionadas = new List<Category>();

    protected override void OnInitialized()
    {
        CategoriasNoSeleccionadas = new List<Category>(){
        new Category(){Id = 1, Name="Terror"},
        new Category(){Id = 6, Name="Comedia"},
        new Category(){Id = 7, Name="Accion"},
        new Category(){Id = 8, Name="Drama"}
    };
    }
    async Task Create()
    {
        var httpResponse = await repositorio.Post<Movie,int>("api/movies", Movie);
        if (httpResponse.Error)
        {
            var body = await httpResponse.GetBody();
            await showMessage.ShowErrorMessage(body);
            Console.WriteLine(body);
        }
        else
        {
            var MovieId = httpResponse.Response;
            navigationManager.NavigateTo($"/movie/{MovieId}/{Movie.Moviename.Replace("  ","-")}");
        }
    }


    @* void Create()
    {
         Con el navigationManager vamos a redireccionar al usuario a otras rutas dentro del sistema 
        Console.WriteLine(navigationManager.Uri);
        navigationManager.NavigateTo("movie");
        Console.WriteLine($"Pelicula: {Movie.Moviename}");
        Console.WriteLine($"Premier: {Movie.Premier}");
        Console.WriteLine($"Esta en cartelera: {Movie.EnCartelera}");
        Console.WriteLine($"Poster: {Movie.MovieImage}");
        Console.WriteLine($"Sinopsis: {Movie.Sinopsis}");

    } *@
}